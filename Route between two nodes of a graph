/*Given a directed graph, design an algorithm to find out whether there is a route between two nodes.*/



public class Main {

    public boolean allPathsSourceTarget(int[][] graph, int s, int t, int n){
        
        List<List<Integer>> edges = new ArrayList<>();
        
        for(int i=0; i<n; i++){
            edges.add(new ArrayList<>());
        }
        
        for(int i=0; i<graph.length; i++){
           edges.get(graph[i][0]).add(graph[i][1]);
        }
        
        
        return dfs(s, t, new HashSet<>(), edges);
 
        
     
   }
    
    
    public boolean dfs(int s, int t, Set<Integer> visited, List<List<Integer>> graph){
        
        if(s==t) return true;
    
            
            visited.add(s);
            
            for(int x: graph.get(s)){
                if(!visited.contains(x)){
                    
                    if(dfs(x, t, visited, graph)){
                      return true;  
                    }
                }   
            }
            
           return false; 
        }
        
 

    public static void main(String[] args) {
        Main test = new Main();
        
        int[][] i = {{0,1},{0, 2}, {1,3}, {2,4}};
        
        
        System.out.println(test.allPathsSourceTarget(i, 1 , 4, 5 ));
        System.out.println(test.allPathsSourceTarget(i, 0 , 2, 5 ));
        
        
        
        
    }
}
