/*There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.*/



class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        
        List<List<Integer>> graph = new ArrayList<>();
        
        
        for(int i=0; i< numCourses; i++){
            graph.add(new ArrayList<>());
        }
        
        for(int i=0; i<prerequisites.length; i++){
            graph.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        
        int[] visited = new int[numCourses];
        
        for(int i=0; i< numCourses; i++){
            if(helper(graph, visited, i)){
                return false;
            }
        }
        
        return true;
    
    }
    
    
    
    public boolean helper(List<List<Integer>> graph, int visited[], int i){
        
        if(visited[i]==2) return true;
        if(visited[i]==1) return false;
        
        visited[i]=2;
        
        for(int x: graph.get(i)){
            if(helper(graph, visited, x)){
                return true;
            };
        }
        visited[i]=1;
        
        return false;
    
        
    }
    
    
    
    
    
    
    
    
    
    
}
